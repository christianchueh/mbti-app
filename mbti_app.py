# MBTI Test System (‰∏≠ÊñáÈ°åÁõÆÔºãÂµåÂÖ•ÂúñÁâá PDF ÈÅøÂÖç‰∫ÇÁ¢º)
import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import tempfile
import os
from fpdf import FPDF
from PIL import Image, ImageDraw, ImageFont

st.set_page_config(page_title="MBTI Ê∏¨È©óÁ≥ªÁµ±", layout="centered")

st.title("MBTI Ê∏¨È©óÁ≥ªÁµ±")

# Á¨¨‰∏ÄÈ†ÅÔºöÂÄã‰∫∫Ë≥áÊñô
if "page" not in st.session_state:
    st.session_state.page = 1
if "mbti_answers" not in st.session_state:
    st.session_state.mbti_answers = []
if "question_index" not in st.session_state:
    st.session_state.question_index = 0

if st.session_state.page == 1:
    with st.form("user_info"):
        name = st.text_input("ÂßìÂêç")
        age = st.number_input("Âπ¥Á¥Ä", min_value=0, max_value=120, step=1)
        gender = st.selectbox("ÊÄßÂà•", ["Áî∑", "Â•≥", "ÂÖ∂‰ªñ"])
        next1 = st.form_submit_button("‰∏ã‰∏ÄÈ†Å")

    if next1 and name:
        st.session_state.name = name
        st.session_state.age = age
        st.session_state.gender = gender
        st.session_state.page = 2

mbti_questions = [
    ("ÊàëÂñúÊ≠°ÂèÉÂä†Á§æ‰∫§Ê¥ªÂãï„ÄÇ", 'E'), ("ÊàëÂÅèÂ•ΩÁç®ËôïÊôÇÈñì„ÄÇ", 'I'),
    ("ÊàëÂÅöÊ±∫ÂÆöÊôÇ‰æùÊìöÈÇèËºØ„ÄÇ", 'T'), ("ÊàëÂÅöÊ±∫ÂÆöÊôÇ‰æùÊìöÊÑüÂèó„ÄÇ", 'F'),
    ("ÊàëÂÅèÂ•Ω‰∫ãÂÖàË¶èÂäÉÂ•Ω‰∏ÄÂàá„ÄÇ", 'J'), ("ÊàëÂÅèÂ•ΩÈö®Ê©üÊáâËÆä„ÄÇ", 'P'),
    ("ÊàëÈóúÊ≥®ÂÖ∑È´îÁ¥∞ÁØÄ„ÄÇ", 'S'), ("ÊàëËëóÈáçÂ§ßÂ±ÄËàáÂèØËÉΩÊÄß„ÄÇ", 'N'),
    ("ÊàëÂú®‰∫∫Áæ§‰∏≠ÊÑüÂà∞ÂÖÖÊªøÊ¥ªÂäõ„ÄÇ", 'E'), ("ÊàëÁç®ËôïÊôÇÊÑüÂà∞ÂÖÖÈõª„ÄÇ", 'I'),
    ("ÊàëÁøíÊÖ£Áî®ÁêÜÊÄßËß£Ê±∫ÂïèÈ°å„ÄÇ", 'T'), ("ÊàëÈáçË¶ñ‰ªñ‰∫∫ÊÑüÂèó„ÄÇ", 'F'),
    ("ÊàëÂñúÊ≠°ÂàóÂá∫ÂæÖËæ¶Ê∏ÖÂñÆ„ÄÇ", 'J'), ("ÊàëÂÇæÂêëËá®Â†¥ÂèçÊáâ„ÄÇ", 'P'),
    ("ÊàëËßÄÂØüÂäõÊïèÈä≥„ÄÅÊ≥®ÈáçÁèæÂØ¶„ÄÇ", 'S'), ("ÊàëÂñúÊ≠°ÂπªÊÉ≥ËàáÂèØËÉΩÊÄß„ÄÇ", 'N'),
    ("ÊàëÂñúÊ≠°ÂíåÂæàÂ§ö‰∫∫‰∫íÂãï„ÄÇ", 'E'), ("ÊàëÂè™ÂíåÁÜüÊÇâÁöÑ‰∫∫‰∫íÂãï„ÄÇ", 'I'),
    ("ÊàëË™™Ë©±Áõ¥ÁôΩ„ÄÇ", 'T'), ("ÊàëË™™Ë©±ÂßîÂ©â„ÄÇ", 'F'),
    ("ÊàëÂñúÊ≠°ÊéåÊéß‰∫ãÊÉÖÁöÑÈÄ≤Â∫¶„ÄÇ", 'J'), ("ÊàëÈö®ÈÅáËÄåÂÆâ„ÄÇ", 'P'),
    ("ÊàëÁõ∏‰ø°ÁúºË¶ãÁÇ∫ÊÜë„ÄÇ", 'S'), ("ÊàëÁõ∏‰ø°Áõ¥Ë¶∫„ÄÇ", 'N'),
    ("ÊàëÈáçË¶ñÊïàÁéá„ÄÇ", 'T'), ("ÊàëÈáçË¶ñÂíåË´ß„ÄÇ", 'F'),
    ("ÊàëÊúÉÊää‰∫ãÊÉÖÂÆâÊéíÂ¶•Áï∂„ÄÇ", 'J'), ("ÊàëÂÆπÊòìË¢´Á™ÅÁôº‰∫ã‰ª∂Âê∏Âºï„ÄÇ", 'P'),
    ("Êàë‰æùÊìöÁèæÂØ¶ÂÅöÈÅ∏Êìá„ÄÇ", 'S'), ("ÊàëÁ∂ìÂ∏∏ËÖ¶‰∏≠ÊµÆÁèæÊñ∞ÊÉ≥Ê≥ï„ÄÇ", 'N')
]

if st.session_state.page == 2:
    st.subheader("MBTI Ê∏¨È©ó (30È°å)")
    index = st.session_state.question_index
    question, dimension = mbti_questions[index]
    answer = st.radio(f"ÂïèÈ°å {index+1}: {question}", ["ÈùûÂ∏∏ÂêåÊÑè", "ÂêåÊÑè", "ÊôÆÈÄö", "‰∏çÂêåÊÑè", "ÈùûÂ∏∏‰∏çÂêåÊÑè"], key=f"q{index}")

    if st.button("‰∏ã‰∏ÄÈ°å"):
        st.session_state.mbti_answers.append((answer, dimension))
        st.session_state.question_index += 1
        if st.session_state.question_index >= len(mbti_questions):
            st.session_state.page = 3

if st.session_state.page == 3:
    st.subheader("ËààË∂£ËàáÁ∂ìÊ≠∑")
    interests_list = ["Á®ãÂºè", "Êï∏Â≠∏", "Ëã±Êñá", "Á©çÊú®", "Áπ™Áï´", "Èñ±ËÆÄ", "ÂØ´‰Ωú", "Ë°®ÈÅî", "ÈÇèËºØÊé®ÁêÜ", "Ê©üÂô®‰∫∫", "ÂúòÈöäÂêà‰Ωú", "È†òÂ∞é", "Ë®≠Ë®à"]
    interests = []
    cols = st.columns(4)
    for i, interest in enumerate(interests_list):
        if cols[i % 4].checkbox(interest):
            interests.append(interest)

    experience = st.text_area("ÂèÉË≥ΩÊàñÂÄã‰∫∫Á∂ìÊ≠∑Á∞°Ëø∞")

    if st.button("ÁîüÊàê PDF Â†±Âëä"):
        scores = {'E': 0, 'I': 0, 'S': 0, 'N': 0, 'T': 0, 'F': 0, 'J': 0, 'P': 0}
        mapping = {"ÈùûÂ∏∏ÂêåÊÑè": 1, "ÂêåÊÑè": 2, "ÊôÆÈÄö": 3, "‰∏çÂêåÊÑè": 4, "ÈùûÂ∏∏‰∏çÂêåÊÑè": 5}
        for ans, dim in st.session_state.mbti_answers:
            val = mapping[ans]
            if dim in ['E', 'S', 'T', 'J']:
                scores[dim] += 6 - val
            else:
                scores[dim] += val

        result = ''.join([
            'E' if scores['E'] >= scores['I'] else 'I',
            'S' if scores['S'] >= scores['N'] else 'N',
            'T' if scores['T'] >= scores['F'] else 'F',
            'J' if scores['J'] >= scores['P'] else 'P'
        ])

        labels = ['E', 'I', 'S', 'N', 'T', 'F', 'J', 'P']
        values = [scores[l] for l in labels]
        angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
        values += values[:1]
        angles += angles[:1]

        fig, ax = plt.subplots(subplot_kw=dict(polar=True))
        ax.plot(angles, values)
        ax.fill(angles, values, alpha=0.25)
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(labels)
        ax.set_yticklabels([])
        ax.set_title("MBTI Rader Chart")

        tmp_img = tempfile.NamedTemporaryFile(suffix=".png", delete=False)
        plt.savefig(tmp_img.name)
        plt.close()

        img_width, img_height = 800, 500
        info_img = Image.new("RGB", (img_width, img_height), "white")
        draw = ImageDraw.Draw(info_img)
        try:
            font = ImageFont.truetype("NotoSansTC[wght].ttf", size=22)
        except:
            font = ImageFont.load_default()

        draw.text((10, 10), f"ÂßìÂêç: {st.session_state.name}", font=font, fill="black")
        draw.text((10, 60), "ËààË∂£: " + ", ".join(interests), font=font, fill="black")
        draw.text((10, 130), "Á∂ìÊ≠∑: " + experience, font=font, fill="black")

        info_img_file = tempfile.NamedTemporaryFile(suffix=".png", delete=False)
        info_img.save(info_img_file.name)

        tmp_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False)
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)

        pdf.cell(200, 10, "MBTI Test Report", new_x="LMARGIN", new_y="NEXT", align='C')
        pdf.set_x(10)
        pdf.cell(200, 10, f"MBTI Personality Type: {result}", new_x="LMARGIN", new_y="NEXT")
        pdf.set_x(10)
        for pair in [('E', 'I'), ('S', 'N'), ('T', 'F'), ('J', 'P')]:
            pdf.cell(200, 10, f"{pair[0]}: {scores[pair[0]]} / {pair[1]}: {scores[pair[1]]}", new_x="LMARGIN", new_y="NEXT")
        pdf.ln(5)
        pdf.image(tmp_img.name, x=50, w=100)
        pdf.image(info_img_file.name, x=10, y=None, w=180)

        pdf.output(tmp_pdf.name)
        with open(tmp_pdf.name, "rb") as f:
            st.download_button("üìÑ ‰∏ãËºâ PDF Â†±Âëä", f, file_name="MBTI_Â†±Âëä.pdf")
